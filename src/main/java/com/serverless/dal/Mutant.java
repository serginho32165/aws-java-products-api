package com.serverless.dal;

import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapper;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapperConfig;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapperConfig.TableNameOverride;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAttribute;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBRangeKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBQueryExpression;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBScanExpression;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedKey;
import com.amazonaws.services.dynamodbv2.datamodeling.PaginatedQueryList;
import com.amazonaws.services.dynamodbv2.model.AttributeValue;



import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;

@DynamoDBTable(tableName = "PLACEHOLDER_PRODUCTS_TABLE_NAME")
public class Mutant {

    // get the table name from env. var. set in serverless.yml
    private static final String PRODUCTS_TABLE_NAME = System.getenv("PRODUCTS_TABLE_NAME");

    private static DynamoDBAdapter db_adapter;
    private final AmazonDynamoDB client;
    private final DynamoDBMapper mapper;

    private Logger logger = Logger.getLogger(this.getClass());

    private String id;
    private String mutant;
    private String adn;

    @DynamoDBHashKey(attributeName = "id")
    @DynamoDBAutoGeneratedKey
    public String getId() {
        return this.id;
    }
    public void setId(String id) {
        this.id = id;
    }

    @DynamoDBRangeKey(attributeName = "mutant")
    public String getMutant() {
        return this.mutant;
    }
    public void setMutant(String mutant) {
        this.mutant = mutant;
    }

    @DynamoDBAttribute(attributeName = "adn")
    public String getAdn() {
        return this.adn;
    }
    public void setAdn(String adn) {
        this.adn = adn;
    }

    public Mutant() {
        // build the mapper config
        DynamoDBMapperConfig mapperConfig = DynamoDBMapperConfig.builder()
            .withTableNameOverride(new DynamoDBMapperConfig.TableNameOverride(PRODUCTS_TABLE_NAME))
            .build();
        // get the db adapter
        this.db_adapter = DynamoDBAdapter.getInstance();
        this.client = this.db_adapter.getDbClient();
        // create the mapper with config
        this.mapper = this.db_adapter.createDbMapper(mapperConfig);
    }

    public String toString() {
        return String.format("Mutant [id=%s, mutant=%s, adn=%s]", this.id, this.mutant, this.adn);
    }

    // methods
    public Boolean ifTableExists() {
        return this.client.describeTable(PRODUCTS_TABLE_NAME).getTable().getTableStatus().equals("ACTIVE");
    }

    public int countMutant() throws IOException {
        int mutants = 0;
        DynamoDBScanExpression scanExp = new DynamoDBScanExpression();
        System.out.println("Enter count Mutant");

        Map<String, AttributeValue> eav = new HashMap<String, AttributeValue>();
        eav.put(":val1", new AttributeValue().withS("1"));

        DynamoDBScanExpression scanExpression = new DynamoDBScanExpression()
            .withFilterExpression("mutant = :val1").withExpressionAttributeValues(eav);

        List<Mutant> scanResult = mapper.scan(Mutant.class, scanExpression);

       return scanResult.size();
    }

    public int countHuman() throws IOException {
        int mutants = 0;
        DynamoDBScanExpression scanExp = new DynamoDBScanExpression();
        System.out.println("Enter count Human");

        Map<String, AttributeValue> eav = new HashMap<String, AttributeValue>();
        eav.put(":val1", new AttributeValue().withS("0"));

        DynamoDBScanExpression scanExpression = new DynamoDBScanExpression()
            .withFilterExpression("mutant = :val1").withExpressionAttributeValues(eav);

        List<Mutant> scanResult = mapper.scan(Mutant.class, scanExpression);
       return scanResult.size();
    }

    public Mutant get(String id) throws IOException {
        Mutant product = null;

        HashMap<String, AttributeValue> av = new HashMap<String, AttributeValue>();
        av.put(":v1", new AttributeValue().withS(id));

        DynamoDBQueryExpression<Mutant> queryExp = new DynamoDBQueryExpression<Mutant>()
            .withKeyConditionExpression("id = :v1")
            .withExpressionAttributeValues(av);

        PaginatedQueryList<Mutant> result = this.mapper.query(Mutant.class, queryExp);
        if (result.size() > 0) {
          product = result.get(0);
          logger.info("Mutant - get(): product - " + product.toString());
        } else {
          logger.info("Mutant - get(): product - Not Found.");
        }
        return product;
    }

    public void save(Mutant mutant) throws IOException {
        logger.info("Mutant - save(): " + mutant.toString());
        this.mapper.save(mutant);
    }

    public Boolean delete(String id) throws IOException {
        Mutant mutant = null;

        // get mutant if exists
        mutant = get(id);
        if (mutant != null) {
          logger.info("Mutant - delete(): " + mutant.toString());
          this.mapper.delete(mutant);
        } else {
          logger.info("mutant - delete(): mutant - does not exist.");
          return false;
        }
        return true;
    }

}